#!/usr/bin/env python3
# coding: utf-8

import os
import gi
import sqlite3
gi.require_version('Gtk', '3.0')
from gi.repository import Gtk
from util import *

class NLPCore(Gtk.Window):
    def __init__(self):
        super(NLPCore, self).__init__()
        self.action = "seggment"
        self.is_training = False
        self.db = None
        self.init_ui()
        self.initialDB()
        self.show()

    def init_ui(self):
        self.set_border_width(15)
        self.set_title("Hệ thống huấn luyện tiếng việt (Tách từ/Gắn nhãn)")
        self.set_size_request(500, 250)
        self.set_position(Gtk.WindowPosition.CENTER)
        if os.path.isfile(os.path.join(os.path.dirname(__file__),'favicon.png')):
            self.set_icon_from_file('favicon.png')
        self.set_resizable(False)
        self.connect('delete_event', self.quit)

        vbox = Gtk.Box(orientation=Gtk.Orientation.VERTICAL, spacing=6)
        vbox.set_homogeneous(False)
        self.add(vbox)

        tbox = Gtk.Box(spacing=10)
        self.btnSegmention = Gtk.Button(label="Tách từ")
        self.btnSegmention.connect("clicked", self.on_switch_action, "seggment")
        tbox.pack_start(self.btnSegmention, False, False, 0)

        self.btnTagger = Gtk.Button(label="Gán nhãn")
        self.btnTagger.connect("clicked", self.on_switch_action, "tagger")
        tbox.pack_start(self.btnTagger, False, False, 0)
        
        label = Gtk.Label(label="Kiến thức máy")
        tbox.pack_start(label, False, False, 0)

        self.comboModels = Gtk.ComboBoxText()
        self.comboModels.set_entry_text_column(0)
        self.comboModels.connect("changed", self.on_model_changed)

        for md in ["Mặc định", "Bản mới"]:
            self.comboModels.append_text(md)
        self.comboModels.set_active(0)
        tbox.pack_start(self.comboModels, False, False, 0)
        
        self.btnHelp = Gtk.Button(label="Trợ giúp ?")
        self.btnHelp.connect('clicked', self.on_help_clicked)
        tbox.pack_end(self.btnHelp, False, False, 0)

        css_btn = Gtk.CssProvider()
        css_btn.load_from_data(b'.gtk_button { padding:5px 10px; font-family:arial,sans-serif; font-size:medium; border-radius: 0;background-image: none;background-color:white; } .gtk_actived { background-color:transparent; border:none; }')
        self.btnSegmention.get_style_context().add_provider(css_btn, Gtk.STYLE_PROVIDER_PRIORITY_APPLICATION)
        self.btnTagger.get_style_context().add_provider(css_btn, Gtk.STYLE_PROVIDER_PRIORITY_APPLICATION)
        self.btnHelp.get_style_context().add_provider(css_btn, Gtk.STYLE_PROVIDER_PRIORITY_APPLICATION)
        self.btnSegmention.get_style_context().add_class('gtk_button')
        self.btnTagger.get_style_context().add_class('gtk_button')
        self.btnTagger.get_style_context().add_class('gtk_actived')
        self.btnHelp.get_style_context().add_class('gtk_button')
        self.btnHelp.get_style_context().add_class('gtk_actived')
        
        vbox.pack_start(tbox,False, False, 0)
        
        tbox.show_all()
        
        scrolledWindow = Gtk.ScrolledWindow()
        scrolledWindow.set_hexpand(True)
        scrolledWindow.set_vexpand(True)
        scrolledWindow.set_size_request(-1, 150)
        vbox.pack_start(scrolledWindow,True, True, 1)

        self.textview = Gtk.TextView()
        self.textview.set_editable(True)
        self.textview.set_wrap_mode(Gtk.WrapMode.WORD)
        scrolledWindow.add(self.textview)

        provider = Gtk.CssProvider()
        provider.load_from_data(b'.gtk_textview { padding:10px; font-family:arial,sans-serif; font-size:medium;}')
        self.textview.get_style_context().add_provider(provider, Gtk.STYLE_PROVIDER_PRIORITY_APPLICATION)
        self.textview.get_style_context().add_class('gtk_textview')

        scrolledWindow.show_all()

        provider = Gtk.CssProvider()
        provider.load_from_data(b'.gtk_label { padding:0; font-family:arial,sans-serif; font-size:medium; margin:0;}')

        self.lblState = Gtk.Label(label="..", xalign=0)
        self.lblState.get_style_context().add_provider(provider, Gtk.STYLE_PROVIDER_PRIORITY_APPLICATION)
        self.lblState.get_style_context().add_class('gtk_label')
        
        vbox.pack_start(self.lblState, True, True, 0)

        hbox = Gtk.Box(orientation=Gtk.Orientation.HORIZONTAL, spacing=5)

        self.btnAdd = Gtk.Button(label="Thêm dữ liệu")
        self.btnAdd.connect('clicked', self.on_add_clicked)
        hbox.pack_start(self.btnAdd, True, True, 0)

        self.btnPrev = Gtk.Button(label="Trước đó")
        self.btnPrev.connect('clicked', self.on_prev_clicked)
        self.btnPrev.set_sensitive(False)
        hbox.pack_start(self.btnPrev, True, True, 0)
        
        self.btnNext = Gtk.Button(label="Tiếp theo")
        self.btnNext.connect('clicked', self.on_next_clicked)
        self.btnNext.set_sensitive(True)
        hbox.pack_start(self.btnNext, True, True, 0)

        self.btnSave = Gtk.Button(label="Lưu dữ liệu")
        self.btnSave.connect('clicked', self.on_saved_clicked)
        self.btnSave.set_sensitive(True)
        hbox.pack_start(self.btnSave, True, True, 0)

        self.btnEval = Gtk.Button(label="Dự đoán")
        self.btnEval.connect('clicked', self.on_eval_clicked)
        self.btnEval.set_sensitive(True)
        hbox.pack_start(self.btnEval, True, True, 0)

        vbox.pack_start(hbox,False, False, 0)
        hbox.show_all()

        hbox = Gtk.Box(orientation=Gtk.Orientation.HORIZONTAL, spacing=5)

        self.btnTrainTok = Gtk.Button(label="Huấn luyện tách từ")
        self.btnTrainTok.connect('clicked', self.on_traintok_clicked)
        self.btnTrainTok.set_sensitive(True)
        hbox.pack_start(self.btnTrainTok, True, True, 0)

        self.btnTrainTag = Gtk.Button(label="Huấn luyện gắn nhãn")
        self.btnTrainTag.connect('clicked', self.on_traintag_clicked)
        self.btnTrainTag.set_sensitive(True)
        hbox.pack_start(self.btnTrainTag, True, True, 0)

        vbox.pack_start(hbox,False, False, 0)
        hbox.show_all()
        separator = Gtk.Separator(orientation=Gtk.Orientation.HORIZONTAL)
        separator.set_margin_top(0)
        separator.set_margin_bottom(0)
        vbox.pack_start(separator, True, False, 0)
        separator.show()
        self.lblstatus = Gtk.Label(label="", xalign=0)
        self.lblstatus.get_style_context().add_provider(provider, Gtk.STYLE_PROVIDER_PRIORITY_APPLICATION)
        self.lblstatus.get_style_context().add_class('gtk_label')
        vbox.pack_end(self.lblstatus,True, True, 0)
        self.lblstatus.show()
        vbox.show()

    def on_switch_action(self, button, action):
        action = action.lower() if action.lower() in ["tagger","seggment"] else "seggment"
        if self.action == action:
            return
        self.action = action
        if action == "seggment":
            self.btnSegmention.get_style_context().remove_class('gtk_actived')
            self.btnTagger.get_style_context().add_class('gtk_actived')
        else:
            self.btnTagger.get_style_context().remove_class('gtk_actived')
            self.btnSegmention.get_style_context().add_class('gtk_actived')

    def on_model_changed(self, combo):
        pass

    def on_traintok_clicked(self, button):
        pass

    def on_traintag_clicked(self, button):
        pass
    
    def on_help_clicked(self, button):
        dialog = Gtk.MessageDialog(transient_for=self,flags=0,message_type=Gtk.MessageType.INFO,buttons=Gtk.ButtonsType.OK,text="Nhãn từ loại")
        dialog.format_secondary_text("""/A Tính từ   \t/C Liên từ   \t/E Giới từ
/I Thán từ   \t/L Định từ   \t/M Số từ
/N Danh từ   \t/Nc Phân loại   \t/Ny Viết tắt
/Np Tên riêng   \t/Nu Đơn vị   \t/P Đại từ
/R Phó từ      \t/S Yếu tố      \t/T Trợ từ
/V Động từ      \t/X Từ loại      \t/F Ký tự

Đối với tách từ khi tạo dữ liệu huấn luyện chỉ
cần dùng dấu `_` để phân cách nó là từ ghép

VD:
`Hoc_sinh học sinh_học`
`Khuê_Mộc_Lan là con_gái`
""")
        dialog.run()
        dialog.destroy()
    
    def on_add_clicked(self, button):
        pass
    
    def on_prev_clicked(self, button):
        pass
    
    def on_next_clicked(self, button):
        pass
    
    def on_saved_clicked(self, button):
        pass
    
    def on_eval_clicked(self, button):
        pass

    def initialDB(self):
        try:
            self.db = sqlite3.connect(os.path.join(os.path.dirname(__file__),'vncore.db'), check_same_thread=False)
            self.db.execute("CREATE TABLE IF NOT EXISTS sentences (id INTEGER PRIMARY KEY, sentence TEXT, cleaned TEXT, tokens TEXT, tagged TEXT)")
            if self.db.total_changes >= 0:
                self.lblstatus.set_markup("<span color=\"green\">Đã kết nối tới cơ sở dữ liệu `vncore.db`</span>")
            else:
                self.lblstatus.set_markup("<span color=\"red\">Cơ sở dữ liệu `vncore.db` chưa được kết nối</span>")
        except Exception as ex:
            dialogWindow = Gtk.MessageDialog(parent=self, modal=True, destroy_with_parent=True, message_type=Gtk.MessageType.INFO, buttons=Gtk.ButtonsType.OK, text="Lỗi kết nối tới CSDL")
            dialogWindow.format_secondary_text(str(ex))
            dialogWindow.run()
            dialogWindow.destroy()

    def quit(self, sender, event):
        Gtk.main_quit()

if __name__ == "__main__":
    NLPCore()
    Gtk.main()
