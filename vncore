#!/usr/bin/env python3
# coding: utf-8

import os
import gi
import sqlite3
gi.require_version('Gtk', '3.0')
from gi.repository import Gtk
import string, re
import multiprocessing
from util import *
from tokenizer import Tokenizer
from tagger import Tagger
from vtrie import VTrie

class NLPCore(Gtk.Window):
    def __init__(self):
        super(NLPCore, self).__init__()
        self.action = "seggment"
        self.kernel_only = False
        self.tokenizer = None
        self.postagger = None
        self.vtrie = VTrie()
        self.last_id = -1
        self.entry = None
        self.job = None
        self.is_training = False
        self.db = None
        self.init_ui()
        self.initialDB()
        self.show()

    def init_ui(self):
        self.set_border_width(15)
        self.set_title("Hệ thống huấn luyện tiếng việt (Tách từ/Gắn nhãn)")
        self.set_size_request(500, 250)
        self.set_position(Gtk.WindowPosition.CENTER)
        if os.path.isfile(os.path.join(os.path.dirname(__file__),'favicon.png')):
            self.set_icon_from_file('favicon.png')
        self.set_resizable(False)
        self.connect('delete_event', self.quit)

        vbox = Gtk.Box(orientation=Gtk.Orientation.VERTICAL, spacing=6)
        vbox.set_homogeneous(False)
        self.add(vbox)

        tbox = Gtk.Box(spacing=10)
        self.btnSegmention = Gtk.Button(label="Tách từ")
        self.btnSegmention.connect("clicked", self.on_switch_action, "seggment")
        tbox.pack_start(self.btnSegmention, False, False, 0)

        self.btnTagger = Gtk.Button(label="Gán nhãn")
        self.btnTagger.connect("clicked", self.on_switch_action, "tagger")
        tbox.pack_start(self.btnTagger, False, False, 0)
        
        label = Gtk.Label(label="Kiến thức máy")
        tbox.pack_start(label, False, False, 0)

        self.comboModels = Gtk.ComboBoxText()
        self.comboModels.set_entry_text_column(0)
        self.comboModels.connect("changed", self.on_model_changed)

        for md in ["Mặc định", "Bản mới"]:
            self.comboModels.append_text(md)
        self.comboModels.set_active(0)
        tbox.pack_start(self.comboModels, False, False, 0)
        
        self.btnHelp = Gtk.Button(label="Trợ giúp ?")
        self.btnHelp.connect('clicked', self.on_help_clicked)
        tbox.pack_end(self.btnHelp, False, False, 0)

        css_btn = Gtk.CssProvider()
        css_btn.load_from_data(b'.gtk_button { padding:5px 10px; font-family:arial,sans-serif; font-size:medium; border-radius: 0;background-image: none;background-color:white; } .gtk_actived { background-color:transparent; border:none; }')
        self.btnSegmention.get_style_context().add_provider(css_btn, Gtk.STYLE_PROVIDER_PRIORITY_APPLICATION)
        self.btnTagger.get_style_context().add_provider(css_btn, Gtk.STYLE_PROVIDER_PRIORITY_APPLICATION)
        self.btnHelp.get_style_context().add_provider(css_btn, Gtk.STYLE_PROVIDER_PRIORITY_APPLICATION)
        self.btnSegmention.get_style_context().add_class('gtk_button')
        self.btnTagger.get_style_context().add_class('gtk_button')
        self.btnTagger.get_style_context().add_class('gtk_actived')
        self.btnHelp.get_style_context().add_class('gtk_button')
        self.btnHelp.get_style_context().add_class('gtk_actived')
        
        vbox.pack_start(tbox,False, False, 0)
        
        tbox.show_all()
        
        scrolledWindow = Gtk.ScrolledWindow()
        scrolledWindow.set_hexpand(True)
        scrolledWindow.set_vexpand(True)
        scrolledWindow.set_size_request(-1, 150)
        vbox.pack_start(scrolledWindow,True, True, 1)

        self.textview = Gtk.TextView()
        self.textview.set_editable(True)
        self.textview.set_wrap_mode(Gtk.WrapMode.WORD)
        scrolledWindow.add(self.textview)

        provider = Gtk.CssProvider()
        provider.load_from_data(b'.gtk_textview { padding:10px; font-family:arial,sans-serif; font-size:medium;}')
        self.textview.get_style_context().add_provider(provider, Gtk.STYLE_PROVIDER_PRIORITY_APPLICATION)
        self.textview.get_style_context().add_class('gtk_textview')

        scrolledWindow.show_all()

        provider = Gtk.CssProvider()
        provider.load_from_data(b'.gtk_label { padding:0; font-family:arial,sans-serif; font-size:medium; margin:0;}')

        self.lblState = Gtk.Label(label="..", xalign=0)
        self.lblState.get_style_context().add_provider(provider, Gtk.STYLE_PROVIDER_PRIORITY_APPLICATION)
        self.lblState.get_style_context().add_class('gtk_label')
        self.lblState.show()
        
        vbox.pack_start(self.lblState, True, True, 0)

        hbox = Gtk.Box(orientation=Gtk.Orientation.HORIZONTAL, spacing=5)

        self.btnAdd = Gtk.Button(label="Thêm dữ liệu")
        self.btnAdd.connect('clicked', self.on_add_clicked)
        hbox.pack_start(self.btnAdd, True, True, 0)

        self.btnPrev = Gtk.Button(label="Trước đó")
        self.btnPrev.connect('clicked', self.on_prev_clicked)
        self.btnPrev.set_sensitive(False)
        hbox.pack_start(self.btnPrev, True, True, 0)
        
        self.btnNext = Gtk.Button(label="Tiếp theo")
        self.btnNext.connect('clicked', self.on_next_clicked)
        self.btnNext.set_sensitive(True)
        hbox.pack_start(self.btnNext, True, True, 0)

        self.btnSave = Gtk.Button(label="Lưu dữ liệu")
        self.btnSave.connect('clicked', self.on_saved_clicked)
        self.btnSave.set_sensitive(True)
        hbox.pack_start(self.btnSave, True, True, 0)

        self.btnEval = Gtk.Button(label="Dự đoán")
        self.btnEval.connect('clicked', self.on_eval_clicked)
        self.btnEval.set_sensitive(True)
        hbox.pack_start(self.btnEval, True, True, 0)

        vbox.pack_start(hbox,False, False, 0)
        hbox.show_all()

        hbox = Gtk.Box(orientation=Gtk.Orientation.HORIZONTAL, spacing=5)

        self.btnTrainTok = Gtk.Button(label="Huấn luyện tách từ")
        self.btnTrainTok.connect('clicked', self.on_traintok_clicked)
        self.btnTrainTok.set_sensitive(True)
        hbox.pack_start(self.btnTrainTok, True, True, 0)

        self.btnTrainTag = Gtk.Button(label="Huấn luyện gắn nhãn")
        self.btnTrainTag.connect('clicked', self.on_traintag_clicked)
        self.btnTrainTag.set_sensitive(True)
        hbox.pack_start(self.btnTrainTag, True, True, 0)

        vbox.pack_start(hbox,False, False, 0)
        hbox.show_all()
        separator = Gtk.Separator(orientation=Gtk.Orientation.HORIZONTAL)
        separator.set_margin_top(0)
        separator.set_margin_bottom(0)
        vbox.pack_start(separator, True, False, 0)
        separator.show()
        self.lblstatus = Gtk.Label(label="", xalign=0)
        self.lblstatus.get_style_context().add_provider(provider, Gtk.STYLE_PROVIDER_PRIORITY_APPLICATION)
        self.lblstatus.get_style_context().add_class('gtk_label')
        vbox.pack_end(self.lblstatus,True, True, 0)
        self.lblstatus.show()
        vbox.show()

    def VTrie(self):
        try:
            with open(os.path.join(os.path.dirname(__file__), 'models', 'vocab.txt'), 'r', encoding='utf-8') as fin:
                word = fin.read().strip()
                if word:
                    self.vtrie.add_word(word)
        except:
            pass

    def tokenize(self, text):
        if self.tokenize and self.kernel_only:
            return self.tokenizer.tokenize(text)
        features = self.vtrie.extract_words(text.replace('_',' '))
        for i, v in enumerate(features):
            tmp = v.split(' ')
            if tmp[0].lower() in ["ông","bà","anh","chị","em"]:
                v = ' '.join(tmp[1:])
                features[i] = v
        tokens = set([ token for token in features if ' ' in token ])
        if self.tokenizer:
            tmp = [ word.replace('_',' ') for word in self.tokenizer.tokenize(text).split(' ') if '_' in word ]
            for token in tmp:
                v = token.split(' ')
                if v[0].lower() in ["ông","bà","anh","chị","em"]:
                    token = ' '.join(v[1:])
                if token not in tokens:
                    tokens.add(token)
        tokens = sorted(tokens,key=len, reverse=True)
        for token in tokens:
            text = text.replace(token, token.replace(' ','_'))
        for ch in string.punctuation:
            if ch == ' ' or ch == '_':
                continue
            text = text.replace(ch, ' '+ch+' ')
        text = re.sub(r'\s+',' ',text)
        return text.strip()

    def tagger(self, text):
        if self.postagger:
            if self.kernel_only:
                return self.postagger.postagging(self.tokenize(text.strip()))
            return self.postagger.postagging(text.strip())
        taggers = [[],[]]
        for word in text.split(' '):
            taggers[0].append(word)
            taggers[1].append('N')
        return taggers

    def on_switch_action(self, button, action):
        action = action.lower() if action.lower() in ["tagger","seggment"] else "seggment"
        if self.action == action:
            return
        self.action = action
        if action == "seggment":
            self.btnSegmention.get_style_context().remove_class('gtk_actived')
            self.btnTagger.get_style_context().add_class('gtk_actived')
        else:
            self.btnTagger.get_style_context().remove_class('gtk_actived')
            self.btnSegmention.get_style_context().add_class('gtk_actived')
        self.fill_entry()

    def fill_entry(self):
        if self.entry:
            if self.action == "seggment":
                tokens = (self.entry['tokens'] if self.entry['tokens'] else self.entry['sentence']).split(' ')
                for i, tok in enumerate(tokens):
                    if '_' in tok:
                        tokens[i] = '<b><span color="blue">'+tok+'</span></b>'
            else:
                sentence = self.entry['tagged']
                if not sentence:
                    sentence = self.entry['tokens']
                if not sentence:
                    sentence = self.entry['sentence']
                tokens = sentence.split(' ')
                for i, tok in enumerate(tokens):
                    if has_tagged(tok):
                        word_tag = tok.split('/')
                        tag = word_tag.pop()
                        word = '/'.join(word_tag)
                        tokens[i] = word+'<b><span color="blue">/'+tag+'</span></b>'
            text_buffer = Gtk.TextBuffer()
            self.textview.set_buffer(text_buffer)
            text_buffer.insert_markup(text_buffer.get_start_iter(),' '.join(tokens).replace('&','&amp;'), -1)

    def on_model_changed(self, combo):
        tree_iter = combo.get_active_iter()
        if tree_iter is not None:
            model = combo.get_model()
            name, _ = model[tree_iter][:2]
        else:
            entry = combo.get_child()
            name = entry.get_text()
        if name.lower() == "mặc định":
            self.load_kernel("base")
            self.kernel_only = False
        else:
            self.load_kernel("")
            self.kernel_only = True

    def load_kernel(self, version):
        if version.strip():
            version = "-%s" % version
        kernel = "seggment%s.kernel" % version
        kernel_path = os.path.join(os.path.dirname(__file__), 'models', kernel)
        if os.path.isfile(kernel_path):
            if self.tokenizer is None:
                self.tokenizer = Tokenizer(kernel_path)
            else:
                self.tokenizer.load_kernel(kernel_path)

        kernel = "tagger%s.kernel" % version
        kernel_path = os.path.join(os.path.dirname(__file__), 'models', kernel)
        if os.path.isfile(kernel_path):
            if self.postagger is None:
                self.postagger = Tagger(kernel_path)
            else:
                self.postagger.load_kernel(kernel_path)

    def thread_traning(self, kernel, model, data):
        if len(data) == 0:
            return
        kernel.train(data, model)

    def on_traintok_clicked(self, button):
        if self.is_training == False:
            self.btnTrainTag.set_sensitive(False)
            button.set_label("Dừng huấn luyện")
            self.is_training = True
            try:
                cur = self.db.cursor()
                qry = cur.execute("SELECT tokens FROM sentences").fetchall()
                train_data = []
                for row in qry:
                    if row[0]:
                        train_data.append(row[0])
                self.job = multiprocessing.Process(target=self.thread_traning, args=(self.tokenizer, os.path.join(os.path.dirname(__file__),"models","seggment.kernel"), train_data))
                self.job.start()
            except:
                pass
        else:
            self.is_training = False
            self.btnTrainTag.set_sensitive(True)
            button.set_label('Huấn luyện tách từ')

    def on_traintag_clicked(self, button):
        if self.is_training == False:
            self.btnTrainTok.set_sensitive(False)
            button.set_label("Dừng huấn luyện")
            self.is_training = True
            try:
                cur = self.db.cursor()
                qry = cur.execute("SELECT tagged FROM sentences").fetchall()
                train_data = []
                for row in qry:
                    if row[0]:
                        train_data.append(row[0])
                self.job = multiprocessing.Process(target=self.thread_traning, args=(self.postagger, os.path.join(os.path.dirname(__file__),"models","tagger.kernel"), train_data))
                self.job.start()
            except:
                pass
        else:
            self.is_training = False
            self.btnTrainTok.set_sensitive(True)
            button.set_label("Huấn luyện gắn nhãn")
    
    def on_help_clicked(self, button):
        dialog = Gtk.MessageDialog(transient_for=self,flags=0,message_type=Gtk.MessageType.INFO,buttons=Gtk.ButtonsType.OK,text="Nhãn từ loại")
        dialog.format_secondary_text("""/A Tính từ   \t/C Liên từ   \t/E Giới từ
/I Thán từ   \t/L Định từ   \t/M Số từ
/N Danh từ   \t/Nc Phân loại   \t/Ny Viết tắt
/Np Tên riêng   \t/Nu Đơn vị   \t/P Đại từ
/R Phó từ      \t/S Yếu tố      \t/T Trợ từ
/V Động từ      \t/X Từ loại      \t/F Ký tự

Đối với tách từ khi tạo dữ liệu huấn luyện chỉ
cần dùng dấu `_` để phân cách nó là từ ghép

VD:
`Hoc_sinh học sinh_học`
`Khuê_Mộc_Lan là con_gái`
""")
        dialog.run()
        dialog.destroy()
    
    def set_entry(self, data):
        self.entry = {
            'sentence': data[1],
            'cleaned': data[2],
            'tokens': data[3],
            'tagged': data[4]
        }
    
    def on_add_clicked(self, button):
        textbuffer = self.textview.get_buffer()
        text = textbuffer.get_text(textbuffer.get_start_iter(),textbuffer.get_end_iter(),True).strip()
        if text:
            text = unicode_replace(text)
            text = normalize_text(text+' ').replace('_',' ').strip()
            tokens = tokenize(text.lower())
            tokens = [ tok for tok in tokens if is_word( tok ) ]
            try:
                cur = self.db.cursor()
                item = cur.execute("SELECT id, sentence, cleaned, tokens, tagged FROM sentences WHERE sentence = ?", [ text ]).fetchone()
                if item:
                    self.lblState.set_markup('<span color="brown">Đã lưu #%d</span>' % item[0])
                    if self.last_id <= 0:
                        self.last_id = item[0]
                        self.set_entry(item)
                    cur.close()
                    return
                cur.execute("INSERT INTO sentences (sentence, cleaned) VALUES (?, ?)", [ text, ' '.join(tokens)])
                self.db.commit()
                if self.db.total_changes > 0:
                    last_id = cur.lastrowid
                    if self.last_id <= 0:
                        self.last_id = last_id
                        item = cur.execute("SELECT id, sentence, cleaned, tokens, tagged FROM sentences WHERE id = ?", [ last_id ]).fetchone()
                        if item:
                            self.set_entry(item)
                    self.lblState.set_markup('<span color="green">Đã lưu #%d</span>' % last_id)
                    cur.close()
                else:
                    cur.close()
                    self.lblState.set_markup('<span color="red">Lỗi lưu dữ liệu</span>')
            except Exception as ex:
                self.lblState.set_markup('<span color="red">Lỗi %s</span>' % str(ex))
        else:
            self.lblState.set_markup('<span color="brown">Không có dữ liệu</span>')
    
    def get_neighbor(self):
        try:
            cur = self.db.cursor()
            item = cur.execute("SELECT id FROM sentences WHERE id < ? ORDER BY id DESC LIMIT 1" , [ self.last_id ]).fetchone()
            if item:
                self.btnPrev.set_sensitive(True)
            else:
                self.btnPrev.set_sensitive(False)
            item = cur.execute("SELECT id FROM sentences WHERE id > ? ORDER BY id DESC LIMIT 1" , [ self.last_id ]).fetchone()
            if item:
                self.btnNext.set_sensitive(True)
            else:
                self.btnNext.set_sensitive(False)
            cur.close()
        except:
            pass
    
    def on_prev_clicked(self, button):
        try:
            cur = self.db.cursor()
            item = cur.execute("SELECT id, sentence, cleaned, tokens, tagged FROM sentences WHERE id < ? ORDER BY id ASC LIMIT 1" , [ self.last_id ]).fetchone()
            if not item:
                cur.close()
                self.lblState.set_markup('<span color="brown">Không có dữ liệu</span>')
                return
            self.last_id = item[0]
            self.set_entry(item)
            self.fill_entry()
            cur.close()
            self.get_neighbor()
        except Exception as ex:
            self.lblState.set_markup('<span color="brown">Lỗi tải dữ liệu: %s</span>' % str(ex))
    
    def on_next_clicked(self, button):
        try:
            cur = self.db.cursor()
            item = cur.execute("SELECT id, sentence, cleaned, tokens, tagged FROM sentences WHERE id > ? ORDER BY id ASC LIMIT 1" , [ self.last_id ]).fetchone()
            if not item:
                cur.close()
                self.lblState.set_markup('<span color="brown">Không có dữ liệu</span>')
                return
            self.last_id = item[0]
            self.set_entry(item)
            self.fill_entry()
            cur.close()
            self.get_neighbor()
        except Exception as ex:
            self.lblState.set_markup('<span color="brown">Lỗi tải dữ liệu: %s</span>' % str(ex))
    
    def on_saved_clicked(self, button):
        if self.last_id <= 0:
            self.lblState.set_markup('<span color="brown">Không có thông tin để cập nhật</span>')
            return
        textbuffer = self.textview.get_buffer()
        text = textbuffer.get_text(textbuffer.get_start_iter(),textbuffer.get_end_iter(),True).strip()
        if text:
            text = unicode_replace(text)
            try:
                cur = self.db.cursor()
                item = cur.execute("SELECT id FROM sentences WHERE id = ?", [ self.last_id ]).fetchone()
                if not item:
                    self.lblState.set_markup('<span color="brown">Không có thông tin để cập nhật</span>')
                    cur.close()
                    return
                act = "gắn nhãn"
                if self.action == "seggment":
                    act = "tách từ"
                    cur.execute("UPDATE sentences SET tokens = ? WHERE id = ?", [ text, self.last_id ])
                else:
                    cur.execute("UPDATE sentences SET tagged = ? WHERE id = ?", [ text, self.last_id ])
                self.db.commit()
                if self.db.total_changes >= 0:
                    if self.entry:
                        if self.action == "seggment":
                            self.entry['tokens'] = text
                        else:
                            self.entry['tagged'] = text
                    
                    self.lblState.set_markup('<span color="green">Đã cập nhật %s cho #%d</span>' % ( act, self.last_id))
                else:
                    self.lblState.set_markup('<span color="brown">Lỗi cập nhật %s cho #%d</span>' % ( act, self.last_id))
                cur.close()
            except Exception as ex:
                act = "tách từ" if self.action == "seggment" else "gắn nhãn" 
                self.lblState.set_markup('<span color="brown">Lỗi cập nhật %s: %s</span>' % (act, str(ex)))
        else:
            self.lblState.set_markup('<span color="brown">Không có dữ liệu</span>')
    
    def on_eval_clicked(self, button):
        textbuffer = self.textview.get_buffer()
        text = textbuffer.get_text(textbuffer.get_start_iter(),textbuffer.get_end_iter(),True).strip()
        if text:
            text = unicode_replace(text)
            text = normalize_text(text+' ')
            if self.action == "seggment":
                tokens = self.tokenize(text).split(' ')
                for i, tok in enumerate(tokens):
                    if '_' in tok:
                        tok = '<b><span color="blue">'+tok+'</span></b>'
                        tokens[i] = tok
                text = ' '.join(tokens)
            else:
                result = self.tagger(text.strip())
                text = ''
                for i in range(len(result[0])):
                    text += ' ' + result[0][i]+'<b><span color="blue">/'+result[1][i]+'</span></b>'
                text = text.strip()
            text_buffer = Gtk.TextBuffer()
            self.textview.set_buffer(text_buffer)
            text_buffer.insert_markup(text_buffer.get_start_iter(),text.replace('&','&amp;'), -1)
        else:
            self.lblState.set_markup('<span color="brown">Không có dữ liệu</span>')

    def initialDB(self):
        try:
            self.db = sqlite3.connect(os.path.join(os.path.dirname(__file__),'vncore.db'), check_same_thread=False)
            self.db.execute("CREATE TABLE IF NOT EXISTS sentences (id INTEGER PRIMARY KEY, sentence TEXT, cleaned TEXT, tokens TEXT, tagged TEXT)")
            if self.db.total_changes >= 0:
                self.lblstatus.set_markup("<span color=\"green\">Đã kết nối tới cơ sở dữ liệu `vncore.db`</span>")
            else:
                self.lblstatus.set_markup("<span color=\"red\">Cơ sở dữ liệu `vncore.db` chưa được kết nối</span>")
        except Exception as ex:
            dialogWindow = Gtk.MessageDialog(parent=self, modal=True, destroy_with_parent=True, message_type=Gtk.MessageType.INFO, buttons=Gtk.ButtonsType.OK, text="Lỗi kết nối tới CSDL")
            dialogWindow.format_secondary_text(str(ex))
            dialogWindow.run()
            dialogWindow.destroy()

    def quit(self, sender, event):
        Gtk.main_quit()

if __name__ == "__main__":
    NLPCore()
    Gtk.main()
